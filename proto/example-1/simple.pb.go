// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simple.proto

package simple

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Sex int32

const (
	Sex_UNKNOWN Sex = 0
	Sex_MAN     Sex = 1
	Sex_WOMEN   Sex = 2
)

var Sex_name = map[int32]string{
	0: "UNKNOWN",
	1: "MAN",
	2: "WOMEN",
}

var Sex_value = map[string]int32{
	"UNKNOWN": 0,
	"MAN":     1,
	"WOMEN":   2,
}

func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}

func (Sex) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{0}
}

type Example1 struct {
	Bytes                []byte            `protobuf:"bytes,10,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	String_              string            `protobuf:"bytes,30,opt,name=String,proto3" json:"String,omitempty"`
	Int32                int32             `protobuf:"varint,40,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64                int64             `protobuf:"varint,50,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Uint32               uint32            `protobuf:"varint,60,opt,name=Uint32,proto3" json:"Uint32,omitempty"`
	Uint64               uint64            `protobuf:"varint,70,opt,name=Uint64,proto3" json:"Uint64,omitempty"`
	Float32              float32           `protobuf:"fixed32,80,opt,name=Float32,proto3" json:"Float32,omitempty"`
	Float64              float64           `protobuf:"fixed64,90,opt,name=Float64,proto3" json:"Float64,omitempty"`
	Bool                 bool              `protobuf:"varint,100,opt,name=Bool,proto3" json:"Bool,omitempty"`
	Bytess               [][]byte          `protobuf:"bytes,110,rep,name=Bytess,proto3" json:"Bytess,omitempty"`
	Strings              []string          `protobuf:"bytes,130,rep,name=Strings,proto3" json:"Strings,omitempty"`
	Int32S               []int32           `protobuf:"varint,140,rep,packed,name=Int32s,proto3" json:"Int32s,omitempty"`
	Int64S               []int64           `protobuf:"varint,150,rep,packed,name=Int64s,proto3" json:"Int64s,omitempty"`
	Uint32S              []uint32          `protobuf:"varint,160,rep,packed,name=Uint32s,proto3" json:"Uint32s,omitempty"`
	Uint64S              []uint64          `protobuf:"varint,170,rep,packed,name=Uint64s,proto3" json:"Uint64s,omitempty"`
	Float32S             []float32         `protobuf:"fixed32,180,rep,packed,name=Float32s,proto3" json:"Float32s,omitempty"`
	Float64S             []float64         `protobuf:"fixed64,190,rep,packed,name=Float64s,proto3" json:"Float64s,omitempty"`
	Bools                []bool            `protobuf:"varint,1100,rep,packed,name=Bools,proto3" json:"Bools,omitempty"`
	MapString            map[string]string `protobuf:"bytes,1092,rep,name=MapString,proto3" json:"MapString,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32             map[int32]string  `protobuf:"bytes,1093,rep,name=MapInt32,proto3" json:"MapInt32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64             map[int64]string  `protobuf:"bytes,1094,rep,name=MapInt64,proto3" json:"MapInt64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint32            map[uint32]string `protobuf:"bytes,1095,rep,name=MapUint32,proto3" json:"MapUint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapUint64            map[uint64]string `protobuf:"bytes,1096,rep,name=MapUint64,proto3" json:"MapUint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sex                  Sex               `protobuf:"varint,10000,opt,name=Sex,proto3,enum=Sex" json:"Sex,omitempty"`
	User                 *People           `protobuf:"bytes,1000000,opt,name=User,proto3" json:"User,omitempty"`
	Users                []*People         `protobuf:"bytes,10001000,rep,name=Users,proto3" json:"Users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Example1) Reset()         { *m = Example1{} }
func (m *Example1) String() string { return proto.CompactTextString(m) }
func (*Example1) ProtoMessage()    {}
func (*Example1) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{0}
}

func (m *Example1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Example1.Unmarshal(m, b)
}
func (m *Example1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Example1.Marshal(b, m, deterministic)
}
func (m *Example1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Example1.Merge(m, src)
}
func (m *Example1) XXX_Size() int {
	return xxx_messageInfo_Example1.Size(m)
}
func (m *Example1) XXX_DiscardUnknown() {
	xxx_messageInfo_Example1.DiscardUnknown(m)
}

var xxx_messageInfo_Example1 proto.InternalMessageInfo

func (m *Example1) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *Example1) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *Example1) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *Example1) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *Example1) GetUint32() uint32 {
	if m != nil {
		return m.Uint32
	}
	return 0
}

func (m *Example1) GetUint64() uint64 {
	if m != nil {
		return m.Uint64
	}
	return 0
}

func (m *Example1) GetFloat32() float32 {
	if m != nil {
		return m.Float32
	}
	return 0
}

func (m *Example1) GetFloat64() float64 {
	if m != nil {
		return m.Float64
	}
	return 0
}

func (m *Example1) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *Example1) GetBytess() [][]byte {
	if m != nil {
		return m.Bytess
	}
	return nil
}

func (m *Example1) GetStrings() []string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *Example1) GetInt32S() []int32 {
	if m != nil {
		return m.Int32S
	}
	return nil
}

func (m *Example1) GetInt64S() []int64 {
	if m != nil {
		return m.Int64S
	}
	return nil
}

func (m *Example1) GetUint32S() []uint32 {
	if m != nil {
		return m.Uint32S
	}
	return nil
}

func (m *Example1) GetUint64S() []uint64 {
	if m != nil {
		return m.Uint64S
	}
	return nil
}

func (m *Example1) GetFloat32S() []float32 {
	if m != nil {
		return m.Float32S
	}
	return nil
}

func (m *Example1) GetFloat64S() []float64 {
	if m != nil {
		return m.Float64S
	}
	return nil
}

func (m *Example1) GetBools() []bool {
	if m != nil {
		return m.Bools
	}
	return nil
}

func (m *Example1) GetMapString() map[string]string {
	if m != nil {
		return m.MapString
	}
	return nil
}

func (m *Example1) GetMapInt32() map[int32]string {
	if m != nil {
		return m.MapInt32
	}
	return nil
}

func (m *Example1) GetMapInt64() map[int64]string {
	if m != nil {
		return m.MapInt64
	}
	return nil
}

func (m *Example1) GetMapUint32() map[uint32]string {
	if m != nil {
		return m.MapUint32
	}
	return nil
}

func (m *Example1) GetMapUint64() map[uint64]string {
	if m != nil {
		return m.MapUint64
	}
	return nil
}

func (m *Example1) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return Sex_UNKNOWN
}

func (m *Example1) GetUser() *People {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Example1) GetUsers() []*People {
	if m != nil {
		return m.Users
	}
	return nil
}

type People struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  uint32   `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *People) Reset()         { *m = People{} }
func (m *People) String() string { return proto.CompactTextString(m) }
func (*People) ProtoMessage()    {}
func (*People) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ffd045dd4d042c1, []int{1}
}

func (m *People) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_People.Unmarshal(m, b)
}
func (m *People) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_People.Marshal(b, m, deterministic)
}
func (m *People) XXX_Merge(src proto.Message) {
	xxx_messageInfo_People.Merge(m, src)
}
func (m *People) XXX_Size() int {
	return xxx_messageInfo_People.Size(m)
}
func (m *People) XXX_DiscardUnknown() {
	xxx_messageInfo_People.DiscardUnknown(m)
}

var xxx_messageInfo_People proto.InternalMessageInfo

func (m *People) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *People) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func init() {
	proto.RegisterEnum("Sex", Sex_name, Sex_value)
	proto.RegisterType((*Example1)(nil), "Example1")
	proto.RegisterMapType((map[int32]string)(nil), "Example1.MapInt32Entry")
	proto.RegisterMapType((map[int64]string)(nil), "Example1.MapInt64Entry")
	proto.RegisterMapType((map[string]string)(nil), "Example1.MapStringEntry")
	proto.RegisterMapType((map[uint32]string)(nil), "Example1.MapUint32Entry")
	proto.RegisterMapType((map[uint64]string)(nil), "Example1.MapUint64Entry")
	proto.RegisterType((*People)(nil), "People")
}

func init() { proto.RegisterFile("simple.proto", fileDescriptor_5ffd045dd4d042c1) }

var fileDescriptor_5ffd045dd4d042c1 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x9d, 0xec, 0x6e, 0x76, 0xf3, 0x92, 0x94, 0x65, 0x50, 0xfb, 0xac, 0x28, 0x43, 0x0f,
	0x32, 0x78, 0x58, 0x30, 0x5d, 0x56, 0xd1, 0x7a, 0xb0, 0xd0, 0x82, 0x95, 0x6c, 0xcb, 0x94, 0x52,
	0xf0, 0xb6, 0xe2, 0x52, 0x8a, 0x69, 0x36, 0x64, 0xa3, 0x34, 0x57, 0xf1, 0xe8, 0xc1, 0x93, 0x67,
	0xcf, 0x9e, 0x7b, 0x16, 0x0f, 0xfe, 0x3a, 0xf8, 0x57, 0x78, 0xf2, 0x5f, 0xf0, 0x26, 0x6f, 0x66,
	0x76, 0x93, 0x40, 0x4b, 0x7b, 0xca, 0x7c, 0xdf, 0xf7, 0x7d, 0xde, 0xcc, 0x7b, 0xb3, 0x13, 0xe8,
	0x94, 0x47, 0xc7, 0xa3, 0x41, 0x1e, 0x8d, 0xc6, 0xc5, 0xa4, 0x58, 0xfd, 0x17, 0x40, 0xb0, 0x79,
	0x92, 0x51, 0xe4, 0x1e, 0xbf, 0x0a, 0xde, 0xc6, 0x74, 0x92, 0x97, 0x08, 0x82, 0xc9, 0x8e, 0x32,
	0x82, 0x5f, 0x87, 0xe6, 0xde, 0x64, 0x7c, 0x34, 0x3c, 0xc4, 0xdb, 0x82, 0xc9, 0x96, 0xb2, 0x8a,
	0xb2, 0x9f, 0x0e, 0x27, 0x6b, 0x3d, 0x94, 0x82, 0x49, 0x4f, 0x19, 0x61, 0xa3, 0x49, 0x8c, 0x3d,
	0xc1, 0xa4, 0xa3, 0x8c, 0xa0, 0x1a, 0xfb, 0x47, 0x3a, 0x79, 0x5d, 0x30, 0xd9, 0x55, 0x56, 0x55,
	0xf1, 0x24, 0xc6, 0x2d, 0xc1, 0xa4, 0xab, 0xac, 0xe2, 0x08, 0xfe, 0xd6, 0xa0, 0xc8, 0x08, 0xd8,
	0x15, 0x4c, 0x36, 0x54, 0x25, 0x6b, 0x27, 0x89, 0xf1, 0xb9, 0x60, 0x92, 0xa9, 0x4a, 0x72, 0x0e,
	0xee, 0x46, 0x51, 0x0c, 0xf0, 0xa5, 0x60, 0x32, 0x50, 0x7a, 0x4d, 0xf5, 0x75, 0x13, 0x25, 0x0e,
	0x85, 0x23, 0x3b, 0xca, 0x2a, 0x7e, 0x03, 0x7c, 0xd3, 0x45, 0x89, 0x6f, 0x99, 0x70, 0x64, 0x4b,
	0x55, 0x9a, 0x2f, 0x43, 0x53, 0x77, 0x52, 0xe2, 0x7b, 0x72, 0x3c, 0x65, 0xa5, 0x35, 0x92, 0xb8,
	0xc4, 0x8f, 0x64, 0x38, 0xca, 0x4a, 0x2a, 0x66, 0xda, 0x29, 0xf1, 0x13, 0x39, 0x5d, 0x55, 0xe9,
	0xca, 0x22, 0xe8, 0x33, 0x59, 0xae, 0xaa, 0x34, 0xbf, 0x09, 0x81, 0xed, 0xa9, 0xc4, 0x53, 0xf2,
	0x1a, 0xaa, 0x0e, 0xd4, 0x26, 0x81, 0x5f, 0xc8, 0x64, 0xaa, 0x0e, 0xf0, 0x6b, 0xe0, 0x51, 0x73,
	0x25, 0xfe, 0x0e, 0x84, 0x23, 0x03, 0x65, 0x14, 0xbf, 0x0f, 0xad, 0x7e, 0x36, 0xb2, 0x57, 0xf5,
	0x8d, 0xac, 0x76, 0x0f, 0xa3, 0xea, 0x72, 0xa3, 0xda, 0xdb, 0x1c, 0x4e, 0xc6, 0x53, 0x35, 0xcb,
	0xe5, 0x31, 0x04, 0xfd, 0x6c, 0x64, 0xee, 0xf2, 0xbb, 0xe1, 0x96, 0x17, 0x38, 0x6d, 0x19, 0xac,
	0xce, 0x9c, 0x51, 0x49, 0x8c, 0x3f, 0xce, 0xa1, 0x92, 0x78, 0x81, 0x4a, 0x62, 0x7b, 0x48, 0xfb,
	0x2d, 0xfc, 0x3c, 0xeb, 0x90, 0xc6, 0x9b, 0x1d, 0xd2, 0x7e, 0x29, 0x33, 0x30, 0x89, 0xf1, 0xd7,
	0x79, 0x60, 0xb5, 0xe1, 0x2c, 0x97, 0x2f, 0x83, 0xb3, 0x97, 0x9f, 0xe0, 0x87, 0x54, 0x30, 0xb9,
	0xd4, 0x73, 0xa3, 0xbd, 0xfc, 0x44, 0x51, 0x84, 0xdf, 0x02, 0x77, 0xbf, 0xcc, 0xc7, 0xf8, 0xf5,
	0xdd, 0x63, 0xc1, 0x64, 0xbb, 0xe7, 0x47, 0xbb, 0x79, 0x31, 0x1a, 0xe4, 0x4a, 0x87, 0xb9, 0x00,
	0x8f, 0x7e, 0x4b, 0xfc, 0x7b, 0xfa, 0xc7, 0xd5, 0xdb, 0xd5, 0x09, 0xc6, 0x58, 0x59, 0x87, 0xa5,
	0xc5, 0xa1, 0xf2, 0x10, 0x9c, 0x57, 0xf9, 0x14, 0x99, 0x7e, 0x27, 0xb4, 0xa4, 0xe7, 0xf0, 0x26,
	0x1b, 0xbc, 0xce, 0xb1, 0xa1, 0x63, 0x46, 0x3c, 0x6c, 0x3c, 0x60, 0x2b, 0x8f, 0xa0, 0xbb, 0x30,
	0xda, 0x79, 0xd8, 0xbb, 0x34, 0x6c, 0x1b, 0x9e, 0x87, 0x9d, 0x8b, 0x60, 0x73, 0xee, 0xb9, 0x39,
	0xcf, 0xd3, 0xdd, 0xcb, 0xd3, 0x67, 0xec, 0xed, 0x5e, 0x40, 0x6f, 0xbb, 0x41, 0x3b, 0xec, 0x6c,
	0xbb, 0x81, 0x1b, 0xfa, 0xab, 0x11, 0x34, 0xcd, 0x40, 0xe9, 0xe9, 0x0e, 0xb3, 0xe3, 0xdc, 0x0e,
	0x4e, 0xaf, 0xa9, 0x6a, 0x76, 0x68, 0x2a, 0x74, 0x15, 0x2d, 0xef, 0xde, 0xd1, 0x37, 0xc9, 0xdb,
	0xe0, 0xef, 0xa7, 0xcf, 0xd2, 0x9d, 0x83, 0x34, 0xbc, 0xc2, 0x7d, 0x70, 0xfa, 0x4f, 0xd2, 0x90,
	0xf1, 0x16, 0x78, 0x07, 0x3b, 0xfd, 0xcd, 0x34, 0x6c, 0xbc, 0x68, 0xea, 0xbf, 0xb6, 0xb5, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x44, 0x75, 0xaa, 0xea, 0x04, 0x00, 0x00,
}
